Trace From Pod To servicre 

var fromSrc string

		if srcPodInfo.HostNetwork {
			fromSrc = " 'inport==\"" + srcPodInfo.OVNName + "\""
		} else {
			fromSrc = " 'inport==\"" + srcNamespace + "_" + *srcPodName + "\""
		}
		fromSrc += " && eth.dst==" + srcPodInfo.StorMAC
		fromSrc += " && eth.src==" + srcPodInfo.MAC
		fromSrc += " && ip4.dst==" + dstSvcInfo.IP
		fromSrc += " && ip4.src==" + srcPodInfo.IP
		fromSrc += " && ip.ttl==64"
		fromSrc += " && " + protocol + ".dst==" + *dstPort + " && " + protocol + ".src==52888'"
		fromSrc += " --lb-dst " + dstSvcInfo.PodIP + ":" + dstSvcInfo.PodPort

		fromSrcCmd := "ovn-trace " + sbcmd + " " + srcPodInfo.NodeName + " " + "--ct=new " + fromSrc

ovn-trace ovn-worker --ct=new 'inport==\test-network-policy_webserver-79997dfc5d-fgwr6\ && eth.dst==0a:58:0a:f4:01:01 && eth.src==0a:58:0a:f4:01:05 && ip4.dst==10.96.23.185 && ip4.src==10.244.1.5 && ip.ttl==64 && tcp.dst==8080 && tcp.src=52888` --lb-dst 10.244.1.5:8080

port test-network-policy_webserver-79997dfc5d-fgwr6
        addresses: ["0a:58:0a:f4:01:05 10.244.1.5"]

[root@ovn-control-plane ~]# ovn-nbctl lsp-get-addresses stor-ovn-worker
0a:58:0a:f4:01:01

THE FOLLOWING RULE IS THE ONLY TRACE DIFFERENCE 

5. ls_out_acl (ovn-northd.c:5495): reg0[8] == 1 && (ip4.src == {$a12355022454996700745} && outport == @a15117110755727171322), priority 2001, uuid 07bf8145	
    next;

_uuid               : 40877fed-f89e-4009-961d-f6d978d8867c
addresses           : ["10.244.0.3", "10.244.1.5", "10.244.2.4", "172.18.0.2"]
external_ids        : {name=test-network-policy.allow-from-ingress.ingress.0_v4}
name                : a12355022454996700745



NO NETWORK POLICIES POD 2 Service Test 

[root@ovn-control-plane ~]# ovn-trace ovn-worker --ct=new 'inport=="test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst==0a:58:0a:f4:01:01 && eth.src==0a:58:0a:f4:01:05 && ip4.dst==10.96.23.185 && ip4.src==10.244.1.5 && ip.ttl==64 && tcp.dst==8080 && tcp.src==52888' --lb-dst 10.244.1.5:8080
# tcp,reg14=0x5,vlan_tci=0x0000,dl_src=0a:58:0a:f4:01:05,dl_dst=0a:58:0a:f4:01:01,nw_src=10.244.1.5,nw_dst=10.96.23.185,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=52888,tp_dst=8080,tcp_flags=0

ingress(dp="ovn-worker", inport="test-network-policy_webserver-79997dfc5d-fgwr6")
---------------------------------------------------------------------------------
 0. ls_in_port_sec_l2 (ovn-northd.c:4862): inport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.src == {0a:58:0a:f4:01:05}, priority 50, uuid 8d33f2b1
    next;
 1. ls_in_port_sec_ip (ovn-northd.c:4518): inport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.src == 0a:58:0a:f4:01:05 && ip4.src == {10.244.1.5}, priority 90, uuid 00e8906b
    next;
 3. ls_in_pre_acl (ovn-northd.c:5044): ip, priority 100, uuid 351b171d
    reg0[0] = 1;
    next;
 4. ls_in_pre_lb (ovn-northd.c:5242): ip, priority 100, uuid c00c2943
    reg0[0] = 1;
    next;
 5. ls_in_pre_stateful (ovn-northd.c:5259): reg0[0] == 1, priority 100, uuid 02394472
    ct_next;

ct_next(ct_state=new|trk)
-------------------------
 6. ls_in_acl_hint (ovn-northd.c:5293): ct.new && !ct.est, priority 7, uuid 0db887cd
    reg0[7] = 1;
    reg0[9] = 1;
    next;
 7. ls_in_acl (ovn-northd.c:5675): ip && (!ct.est || (ct.est && ct_label.blocked == 1)), priority 1, uuid 36274369
    reg0[1] = 1;
    next;
11. ls_in_stateful (ovn-northd.c:6043): ct.new && ip4.dst == 10.96.23.185 && tcp.dst == 8080, priority 120, uuid 4ea65a93
    ct_lb(backends=10.244.0.3:8080,10.244.1.5:8080,10.244.2.4:8080);

ct_lb
-----
12. ls_in_pre_hairpin (ovn-northd.c:5991): (ip4.src == 10.244.0.3 && ip4.dst == 10.244.0.3 && tcp.dst == 8080) || (ip4.src == 10.244.1.5 && ip4.dst == 10.244.1.5 && tcp.dst == 8080) || (ip4.src == 10.244.2.4 && ip4.dst == 10.244.2.4 && tcp.dst == 8080), priority 2, uuid ccc69337
    reg0[6] = 1;
    ct_snat(10.96.23.185);

ct_snat(ip4.src=10.96.23.185)
-----------------------------
13. ls_in_hairpin (ovn-northd.c:6118): reg0[6] == 1, priority 1, uuid 3d06bf49
    eth.dst <-> eth.src;
    outport = inport;
    flags.loopback = 1;
    output;

egress(dp="ovn-worker", inport="test-network-policy_webserver-79997dfc5d-fgwr6", outport="test-network-policy_webserver-79997dfc5d-fgwr6")
------------------------------------------------------------------------------------------------------------------------------------------
 0. ls_out_pre_lb (ovn-northd.c:5244): ip, priority 100, uuid ac9ee2e8
    reg0[0] = 1;
    next;
 1. ls_out_pre_acl (ovn-northd.c:5046): ip, priority 100, uuid d4f2440b
    reg0[0] = 1;
    next;
 2. ls_out_pre_stateful (ovn-northd.c:5261): reg0[0] == 1, priority 100, uuid d76b41ba
    ct_next;

ct_next(ct_state=est|trk /* default (use --ct to customize) */)
---------------------------------------------------------------
 4. ls_out_acl_hint (ovn-northd.c:5326): !ct.new && ct.est && !ct.rpl && ct_label.blocked == 0, priority 4, uuid 886f42e3
    reg0[8] = 1;
    reg0[10] = 1;
    next;
 9. ls_out_port_sec_ip (ovn-northd.c:4518): outport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst == 0a:58:0a:f4:01:05 && ip4.dst == {255.255.255.255, 224.0.0.0/4, 10.244.1.5}, priority 90, uuid 44b4d858
    next;
10. ls_out_port_sec_l2 (ovn-northd.c:4928): outport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst == {0a:58:0a:f4:01:05}, priority 50, uuid 69cdab92
    output;
    /* output to "test-network-policy_webserver-79997dfc5d-fgwr6", type "" */


NETWORK POLICIES Pod 2 Service 

[root@ovn-control-plane ~]# ovn-trace ovn-worker --ct=new 'inport=="test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst==0a:58:0a:f4:01:01 && eth.src==0a:58:0a:f4:01:05 && ip4.dst==10.96.23.185 && ip4.src==10.244.1.5 && ip.ttl==64 && tcp.dst==8080 && tcp.src==52888' --lb-dst 10.244.1.5:8080
# tcp,reg14=0x5,vlan_tci=0x0000,dl_src=0a:58:0a:f4:01:05,dl_dst=0a:58:0a:f4:01:01,nw_src=10.244.1.5,nw_dst=10.96.23.185,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=52888,tp_dst=8080,tcp_flags=0

ingress(dp="ovn-worker", inport="test-network-policy_webserver-79997dfc5d-fgwr6")
---------------------------------------------------------------------------------
 0. ls_in_port_sec_l2 (ovn-northd.c:4862): inport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.src == {0a:58:0a:f4:01:05}, priority 50, uuid 8d33f2b1
    next;
 1. ls_in_port_sec_ip (ovn-northd.c:4518): inport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.src == 0a:58:0a:f4:01:05 && ip4.src == {10.244.1.5}, priority 90, uuid 00e8906b
    next;
 3. ls_in_pre_acl (ovn-northd.c:5044): ip, priority 100, uuid 351b171d
    reg0[0] = 1;
    next;
 4. ls_in_pre_lb (ovn-northd.c:5242): ip, priority 100, uuid c00c2943
    reg0[0] = 1;
    next;
 5. ls_in_pre_stateful (ovn-northd.c:5259): reg0[0] == 1, priority 100, uuid 02394472
    ct_next;

ct_next(ct_state=new|trk)
-------------------------
 6. ls_in_acl_hint (ovn-northd.c:5293): ct.new && !ct.est, priority 7, uuid 0db887cd
    reg0[7] = 1;
    reg0[9] = 1;
    next;
 7. ls_in_acl (ovn-northd.c:5675): ip && (!ct.est || (ct.est && ct_label.blocked == 1)), priority 1, uuid 36274369
    reg0[1] = 1;
    next;
11. ls_in_stateful (ovn-northd.c:6043): ct.new && ip4.dst == 10.96.23.185 && tcp.dst == 8080, priority 120, uuid 4ea65a93
    ct_lb(backends=10.244.0.3:8080,10.244.1.5:8080,10.244.2.4:8080);

ct_lb
-----
12. ls_in_pre_hairpin (ovn-northd.c:5991): (ip4.src == 10.244.0.3 && ip4.dst == 10.244.0.3 && tcp.dst == 8080) || (ip4.src == 10.244.1.5 && ip4.dst == 10.244.1.5 && tcp.dst == 8080) || (ip4.src == 10.244.2.4 && ip4.dst == 10.244.2.4 && tcp.dst == 8080), priority 2, uuid ccc69337
    reg0[6] = 1;
    ct_snat(10.96.23.185);

ct_snat(ip4.src=10.96.23.185)
-----------------------------
13. ls_in_hairpin (ovn-northd.c:6118): reg0[6] == 1, priority 1, uuid 3d06bf49
    eth.dst <-> eth.src;
    outport = inport;
    flags.loopback = 1;
    output;

egress(dp="ovn-worker", inport="test-network-policy_webserver-79997dfc5d-fgwr6", outport="test-network-policy_webserver-79997dfc5d-fgwr6")
------------------------------------------------------------------------------------------------------------------------------------------
 0. ls_out_pre_lb (ovn-northd.c:5244): ip, priority 100, uuid ac9ee2e8
    reg0[0] = 1;
    next;
 1. ls_out_pre_acl (ovn-northd.c:5046): ip, priority 100, uuid d4f2440b
    reg0[0] = 1;
    next;
 2. ls_out_pre_stateful (ovn-northd.c:5261): reg0[0] == 1, priority 100, uuid d76b41ba
    ct_next;

ct_next(ct_state=est|trk /* default (use --ct to customize) */)
---------------------------------------------------------------
 4. ls_out_acl_hint (ovn-northd.c:5326): !ct.new && ct.est && !ct.rpl && ct_label.blocked == 0, priority 4, uuid 886f42e3
    reg0[8] = 1;
    reg0[10] = 1;
    next;
 5. ls_out_acl (ovn-northd.c:5495): reg0[8] == 1 && (ip4.src == {$a12355022454996700745} && outport == @a15117110755727171322), priority 2001, uuid 07bf8145
    next;
 9. ls_out_port_sec_ip (ovn-northd.c:4518): outport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst == 0a:58:0a:f4:01:05 && ip4.dst == {255.255.255.255, 224.0.0.0/4, 10.244.1.5}, priority 90, uuid 44b4d858
    next;
10. ls_out_port_sec_l2 (ovn-northd.c:4928): outport == "test-network-policy_webserver-79997dfc5d-fgwr6" && eth.dst == {0a:58:0a:f4:01:05}, priority 50, uuid 69cdab92
    output;
    /* output to "test-network-policy_webserver-79997dfc5d-fgwr6", type "" */






RUNNING NOTES: 

So I was able to reproduce on a cluster bot 4.6 Cluster 

[root@debug /]# oc get pods
NAME                         READY   STATUS    RESTARTS   AGE
debug                        1/1     Running   0          13m
webserver-79997dfc5d-256w4   1/1     Running   0          77m
webserver-79997dfc5d-4tpjc   1/1     Running   0          77m
webserver-79997dfc5d-gn2j5   1/1     Running   0          77m

[root@debug /]# oc get networkpolicy 
NAME                        POD-SELECTOR   AGE
allow-from-ingress          <none>         27m
allow-from-same-namespace   <none>         27m
default-deny-all            <none>         27m

WITH NETWORK POLICIES:
[root@debug /]# for pod in $(oc get pods -n test-network-policy --selector=app=webserver -o name); do oc -n test-network-policy exec $(echo $pod | awk -F "/" '{print $2}') -- curl -s -I -m 2 webserver:808 ; done
command terminated with exit code 28
command terminated with exit code 28
command terminated with exit code 28

BUT if I exec into the Debug pod and ping the service I see no problems 

[astoycos@localhost demo]$ oc exec -it debug -- /bin/bash
[root@debug /]# for i in {1..5}; do curl -s -I -m 2 webserver:8080 ; done

HTTP/1.1 200 OK
Date: Fri, 04 Dec 2020 01:06:35 GMT
Connection: keep-alive


HTTP/1.1 200 OK
Date: Fri, 04 Dec 2020 01:06:35 GMT
Connection: keep-alive


HTTP/1.1 200 OK
Date: Fri, 04 Dec 2020 01:06:35 GMT
Connection: keep-alive


HTTP/1.1 200 OK
Date: Fri, 04 Dec 2020 01:06:35 GMT
Connection: keep-alive


HTTP/1.1 200 OK
Date: Fri, 04 Dec 2020 01:06:35 GMT
Connection: keep-alive


This success is also reproducible when exec-ing into any of the other the web server pods 


Try tcpdump -n -i any -n 
